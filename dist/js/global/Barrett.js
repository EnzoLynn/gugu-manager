function BarrettMu(m){this.modulus=biCopy(m),this.k=biHighIndex(this.modulus)+1;var b2k=new BigInt;b2k.digits[2*this.k]=1,this.mu=biDivide(b2k,this.modulus),this.bkplus1=new BigInt,this.bkplus1.digits[this.k+1]=1,this.modulo=BarrettMu_modulo,this.multiplyMod=BarrettMu_multiplyMod,this.powMod=BarrettMu_powMod}function BarrettMu_modulo(x){var q1=biDivideByRadixPower(x,this.k-1),q2=biMultiply(q1,this.mu),q3=biDivideByRadixPower(q2,this.k+1),r1=biModuloByRadixPower(x,this.k+1),r2term=biMultiply(q3,this.modulus),r2=biModuloByRadixPower(r2term,this.k+1),r=biSubtract(r1,r2);r.isNeg&&(r=biAdd(r,this.bkplus1));for(var rgtem=biCompare(r,this.modulus)>=0;rgtem;)r=biSubtract(r,this.modulus),rgtem=biCompare(r,this.modulus)>=0;return r}function BarrettMu_multiplyMod(x,y){var xy=biMultiply(x,y);return this.modulo(xy)}function BarrettMu_powMod(x,y){var result=new BigInt;result.digits[0]=1;for(var a=x,k=y;;){if(0!=(1&k.digits[0])&&(result=this.multiplyMod(result,a)),k=biShiftRight(k,1),0==k.digits[0]&&0==biHighIndex(k))break;a=this.multiplyMod(a,a)}return result}
//# sourceMappingURL=Barrett.js.map